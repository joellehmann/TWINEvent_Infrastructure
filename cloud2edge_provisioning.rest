@proto = http
@hostname = 141.19.44.65 
@user = ditto
@honodevice = demo-device
@honotenant = org.eclipse.packages.c2e
@honodevicepwd = demo-secret
@pwd = ditto
@port = 38080 
@httpadapterport = 18080
@devregport = 28080
@dittoport = 38080
@dittodevopsusr = devops
@dittodevopspwd = foobar

########################################################################################
########################################################################################
### HONO STUFF #########################################################################
########################################################################################
########################################################################################

########################################################################################
### CREATE A NEW TENANT "joel" #########################################################
########################################################################################

POST {{proto}}://{{hostname}}:{{devregport}}/v1/tenants/test

### CURL ###############################################################################

curl -i -X POST {{proto}}://{{hostname}}:{{devregport}}/v1/tenants/joel

########################################################################################
### REGISTER A NEW DEVICE "org.fournier:aircraft" TO TENANT "joel" #####################
########################################################################################

POST {{proto}}://{{hostname}}:{{devregport}}/v1/devices/test/testdevice

### CURL ###############################################################################

curl -i -X POST {{proto}}://{{hostname}}:{{devregport}}/v1/devices/joel/org.fournier:aircraft

########################################################################################
### SET DEVICE "org.fournier:aircraft" CREDENTIALS #####################################
########################################################################################
### CAUTION AUTHENTIFICATION: MQTT USER = my-auth-id-1@joel ############################
########################################################################################


PUT {{proto}}://{{hostname}}:{{devregport}}/v1/credentials/test/testdevice
Content-Type: application/json

[
{
  "type": "hashed-password",
  "auth-id": "testdevice",
  "secrets": [{
    "pwd-plain": "test"
  }]
}]

### CURL ###############################################################################

curl -i -X PUT -H "Content-Type: application/json" --data '[
{
  "type": "hashed-password",
  "auth-id": "my-auth-id-1",
  "secrets": [{
    "pwd-plain": "flugzeug"
  }]
}]' {{proto}}://{{hostname}}:{{devregport}}/v1/credentials/joel/org.fournier:aircraft

########################################################################################
### PUBLISH TELEMETRY TO HONO ##########################################################
### Device and Tenant have to be provisioned previously ################################
########################################################################################

POST {{proto}}://{{hostname}}:{{httpadapterport}}/telemetry
Content-Type: application/json
Authorization: Basic testdevice@test:test

{
  "topic": "org.eclipse.packages.c2e/demo-device/things/twin/commands/modify",
  "headers": {},
  "path": "/features/temperature/properties/value",
  "value": 20
}

### CURL ###############################################################################

curl -X POST -u {{honodevice}}@{{honotenant}}:{{honodevicepwd}}
--data-binary '{
  "topic": "org.eclipse.packages.c2e/demo-device/things/twin/commands/modify",
  "headers": {},
  "path": "/features/temperature/properties/value",
  "value": 25
}' {{proto}}://{{hostname}}:{{httpadapterport}}/telemetry

########################################################################################
########################################################################################
### DITTO STUFF ########################################################################
########################################################################################
########################################################################################

########################################################################################
### DELETE CONNECTION #########################################
########################################################################################

POST {{proto}}://{{hostname}}:{{dittoport}}/devops/piggyback/connectivity
Content-Type: application/json
Authorization: Basic {{dittodevopsusr}}:{{dittodevopspwd}}

{
  "targetActorSelection": "/system/sharding/connection",
  "headers": {
    "aggregate": false
  },
  "piggybackCommand": {
    "type": "connectivity.commands:closeConnection",
    "connectionId": "hono-connection-for-joel"
  }
}


########################################################################################
### CREATE A NEW CONNECTION FROM DITTO TO HONO #########################################
### Tenant, Device and Credentials have to be provisioned previously in HONO ###########
########################################################################################

POST {{proto}}://{{hostname}}:{{dittoport}}/devops/piggyback/connectivity
Content-Type: application/json
Authorization: Basic {{dittodevopsusr}}:{{dittodevopspwd}}

{
  "targetActorSelection": "/system/sharding/connection",
  "headers": {
    "aggregate": false
  },
  "piggybackCommand": {
    "type": "connectivity.commands:createConnection",
    "connection": {
      "id": "hono-connection-for-test",
      "connectionType": "amqp-10",
      "connectionStatus": "open",
      "uri": "amqp://consumer%40HONO:verysecret@c2e-dispatch-router-ext:15672",
      "failoverEnabled": true,
      "sources": [
        {
          "addresses": [
            "telemetry/test",
            "event/test"
          ],
          "authorizationContext": [
            "pre-authenticated:hono-connection"
          ],
          "enforcement": {
            "input": "{{ header:device_id }}",
            "filters": [
              "{{ entity:id }}"
            ]
          },
          "headerMapping": {
            "hono-device-id": "{{ header:device_id }}",
            "content-type": "{{ header:content-type }}"
          },
          "replyTarget": {
            "enabled": true,
            "address": "{{ header:reply-to }}",
            "headerMapping": {
              "to": "command/test/{{ header:hono-device-id }}",
              "subject": "{{ header:subject | fn:default(topic:action-subject) | fn:default(topic:criterion) }}-response",
              "correlation-id": "{{ header:correlation-id }}",
              "content-type": "{{ header:content-type | fn:default('"'"'application/vnd.eclipse.ditto+json'"'"') }}"
            },
            "expectedResponseTypes": [
              "response",
              "error"
            ]
          },
          "acknowledgementRequests": {
            "includes": [],
            "filter": "fn:filter(header:qos,'"'"'ne'"'"','"'"'0'"'"')"
          }
        },
        {
          "addresses": [
            "command_response/test/replies"
          ],
          "authorizationContext": [
            "pre-authenticated:hono-connection"
          ],
          "headerMapping": {
            "content-type": "{{ header:content-type }}",
            "correlation-id": "{{ header:correlation-id }}",
            "status": "{{ header:status }}"
          },
          "replyTarget": {
            "enabled": false,
            "expectedResponseTypes": [
              "response",
              "error"
            ]
          }
        }
      ],
      "targets": [
        {
          "address": "command/test",
          "authorizationContext": [
            "pre-authenticated:hono-connection"
          ],
          "topics": [
            "_/_/things/live/commands",
            "_/_/things/live/messages"
          ],
          "headerMapping": {
            "to": "command/test/{{ thing:id }}",
            "subject": "{{ header:subject | fn:default(topic:action-subject) }}",
            "content-type": "{{ header:content-type | fn:default('"'"'application/vnd.eclipse.ditto+json'"'"') }}",
            "correlation-id": "{{ header:correlation-id }}",
            "reply-to": "{{ fn:default('"'"'command_response/test/replies'"'"') | fn:filter(header:response-required,'"'"'ne'"'"','"'"'false'"'"') }}"
          }
        },
        {
          "address": "command/test",
          "authorizationContext": [
            "pre-authenticated:hono-connection"
          ],
          "topics": [
            "_/_/things/twin/events",
            "_/_/things/live/events"
          ],
          "headerMapping": {
            "to": "command/test/{{ thing:id }}",
            "subject": "{{ header:subject | fn:default(topic:action-subject) }}",
            "content-type": "{{ header:content-type | fn:default('"'"'application/vnd.eclipse.ditto+json'"'"') }}",
            "correlation-id": "{{ header:correlation-id }}"
          }
        }
      ]
    }
  }
}

### CURL ###############################################################################

curl -i -X POST -u {{dittodevopsusr}}:{{dittodevopspwd}} -H 'Content-Type: application/json' --data '{
  "targetActorSelection": "/system/sharding/connection",
  "headers": {
    "aggregate": false
  },
  "piggybackCommand": {
    "type": "connectivity.commands:createConnection",
    "connection": {
      "id": "hono-connection-for-test",
      "connectionType": "amqp-10",
      "connectionStatus": "open",
      "uri": "amqp://consumer%40HONO:verysecret@c2e-dispatch-router-ext:15672",
      "failoverEnabled": true,
      "sources": [
        {
          "addresses": [
            "telemetry/test",
            "event/test"
          ],
          "authorizationContext": [
            "pre-authenticated:hono-connection"
          ],
          "enforcement": {
            "input": "{{ header:device_id }}",
            "filters": [
              "{{ entity:id }}"
            ]
          },
          "headerMapping": {
            "hono-device-id": "{{ header:device_id }}",
            "content-type": "{{ header:content-type }}"
          },
          "replyTarget": {
            "enabled": true,
            "address": "{{ header:reply-to }}",
            "headerMapping": {
              "to": "command/test/{{ header:hono-device-id }}",
              "subject": "{{ header:subject | fn:default(topic:action-subject) | fn:default(topic:criterion) }}-response",
              "correlation-id": "{{ header:correlation-id }}",
              "content-type": "{{ header:content-type | fn:default('"'"'application/vnd.eclipse.ditto+json'"'"') }}"
            },
            "expectedResponseTypes": [
              "response",
              "error"
            ]
          },
          "acknowledgementRequests": {
            "includes": [],
            "filter": "fn:filter(header:qos,'"'"'ne'"'"','"'"'0'"'"')"
          }
        },
        {
          "addresses": [
            "command_response/test/replies"
          ],
          "authorizationContext": [
            "pre-authenticated:hono-connection"
          ],
          "headerMapping": {
            "content-type": "{{ header:content-type }}",
            "correlation-id": "{{ header:correlation-id }}",
            "status": "{{ header:status }}"
          },
          "replyTarget": {
            "enabled": false,
            "expectedResponseTypes": [
              "response",
              "error"
            ]
          }
        }
      ],
      "targets": [
        {
          "address": "command/test",
          "authorizationContext": [
            "pre-authenticated:hono-connection"
          ],
          "topics": [
            "_/_/things/live/commands",
            "_/_/things/live/messages"
          ],
          "headerMapping": {
            "to": "command/test/{{ thing:id }}",
            "subject": "{{ header:subject | fn:default(topic:action-subject) }}",
            "content-type": "{{ header:content-type | fn:default('"'"'application/vnd.eclipse.ditto+json'"'"') }}",
            "correlation-id": "{{ header:correlation-id }}",
            "reply-to": "{{ fn:default('"'"'command_response/test/replies'"'"') | fn:filter(header:response-required,'"'"'ne'"'"','"'"'false'"'"') }}"
          }
        },
        {
          "address": "command/test",
          "authorizationContext": [
            "pre-authenticated:hono-connection"
          ],
          "topics": [
            "_/_/things/twin/events",
            "_/_/things/live/events"
          ],
          "headerMapping": {
            "to": "command/test/{{ thing:id }}",
            "subject": "{{ header:subject | fn:default(topic:action-subject) }}",
            "content-type": "{{ header:content-type | fn:default('"'"'application/vnd.eclipse.ditto+json'"'"') }}",
            "correlation-id": "{{ header:correlation-id }}"
          }
        }
      ]
    }
  }
}' http://{{hostname}}:{{dittoport}}/devops/piggyback/connectivity

########################################################################################
### TEST CONNECTION ####################################################################
########################################################################################

### CURL ###############################################################################

curl -X POST -i -u {{dittodevopsusr}}:{{dittodevopspwd}} -H 'Content-Type: application/json' -d '{
    "targetActorSelection": "/system/sharding/connection",
    "headers": {
        "aggregate": false
    },
    "piggybackCommand": {
        "type": "connectivity.commands:testConnection",
        "connection": {
            "id": "hono-connection-for-joel",
            "connectionType": "amqp-10",
            "connectionStatus": "open",
            "uri": "amqp://consumer%40HONO:verysecret@hono.eclipse.org:15672",
            "failoverEnabled": true,
            "sources": [{
                "addresses": [
                    "telemetry/org.eclipse.ditto",
                    "event/org.eclipse.ditto"
                ],
                "authorizationContext": ["nginx:demo5"]
            }]
        }
    }
}' http://{{hostname}}:{{dittoport}}/devops/piggyback/connectivity?timeout=8s

########################################################################################
### SETUP A COMMON POLICY ##############################################################
########################################################################################

### CURL ###############################################################################

curl -i -X PUT -u ditto:ditto -H 'Content-Type: application/json' --data '{
  "entries": {
    "DEFAULT": {
      "subjects": {
        "{{ request:subjectId }}": {
           "type": "Ditto user authenticated via nginx"
        }
      },
      "resources": {
        "thing:/": {
          "grant": ["READ", "WRITE"],
          "revoke": []
        },
        "policy:/": {
          "grant": ["READ", "WRITE"],
          "revoke": []
        },
        "message:/": {
          "grant": ["READ", "WRITE"],
          "revoke": []
        }
      }
    },
    "HONO": {
      "subjects": {
        "pre-authenticated:hono-connection": {
          "type": "Connection to Eclipse Hono"
        }
      },
      "resources": {
        "thing:/": {
          "grant": ["READ", "WRITE"],
          "revoke": []
        },
        "message:/": {
          "grant": ["READ", "WRITE"],
          "revoke": []
        }
      }
    }
  }
}' http://{{hostname}}:{{dittoport}}/api/2/policies/test:test-policy

########################################################################################
### CREATE THE TWIN ####################################################################
########################################################################################

### CURL ###############################################################################

curl -X PUT -u ditto:ditto -H 'Content-Type: application/json' --data '{
  "policyId": "org.fournier:my-policy",
  "attributes": {
    "location": "France"
  },
  "features": {
    "temperature": {
      "properties": {
        "value": null
      }
    }
  }
}' http://{{hostname}}:{{dittoport}}/api/2/things/test:testdevice

########################################################################################
### VERIFYING IF PROVISIONED ###########################################################
########################################################################################

### CURL ###############################################################################

curl -i -u ditto:ditto http://{{hostname}}:{{dittoport}}/api/2/things/org.fournier:aircraft

########################################################################################
### GET BACK DITTO VALUES ##############################################################
########################################################################################

GET {{proto}}://{{hostname}}:{{dittoport}}/api/2/things/test:testdevice
Authorization: Basic ditto:ditto

### CURL ###############################################################################

curl -u ditto:ditto -w '\n' {{proto}}://{{hostname}}:{{dittoport}}/api/2/things/{{honotenant}}:{{honodevice}}


########################################################################################
### DELETE A TWIN ######################################################################
########################################################################################

### CURL ###############################################################################

curl -X DELETE -u ditto:ditto "http://{{hostname}}:{{dittoport}}/api/2/things/org.fournier:aircraft" -H  "accept: */*"

########################################################################################
### CREATE A POLICY ####################################################################
########################################################################################
PUT {{proto}}://{{user}}:{{pwd}}@{{hostname}}:{{port}}/api/2/policies/test:policy 
Content-Type: application/json

{
      "entries": {
        "owner": {
            "subjects": {
                "nginx:ditto": {
                    "type": "nginx basic auth user"
                }
            },
            "resources": {
                "thing:/": {
                    "grant": [
                        "READ","WRITE"
                    ],
                    "revoke": []
                },
                "policy:/": {
                    "grant": [
                        "READ","WRITE"
                    ],
                    "revoke": []
                },
                "message:/": {
                    "grant": [
                        "READ","WRITE"
                    ],
                    "revoke": []
                }
            }
        }
    }
}

### Create a Demo Device

PUT {{proto}}://{{user}}:{{pwd}}@{{hostname}}:{{port}}/api/2/things/test:esp32
Content-Type: application/json

{
    "policyId": "test:policy",
    "attributes": {
        "name": "esp32",
        "type": "esp32 DevKit C"
    },
    "features": {
        "temp_sensor": {
            "properties": {
                "type" : "DHT11",
                "value": 32
            }
        }
    }
}

### GET ESP32 Info 
GET {{proto}}://{{user}}:{{pwd}}@{{hostname}}:{{port}}/api/2/things/test:esp32


### Create MQTT Connection 
POST http://devops:foobar@{{hostname}}:8080/devops/piggyback/connectivity?timeout=10 
Content-Type: application/json

{
    "targetActorSelection": "/system/sharding/connection",
    "headers": {
    	"aggregate": false
    },
    "piggybackCommand": {
        "type": "connectivity.commands:createConnection",
        "connection": {
            "id": "mqtt-example-connection",
            "connectionType": "mqtt",
            "connectionStatus": "open",
            "failoverEnabled": true,
            "uri": "tcp://dbt:dbt@mq.{{hostname}}:1883",
            "sources": [{
                "addresses": ["ditto-tutorial/#"],
                "authorizationContext": ["nginx:ditto"],
                "qos": 0,
                "filters": []
            }],
            "targets": [{
                "address": "ditto-tutorial/{{ thing:id }}",
                "topics": [
                "_/_/things/twin/events",
                "_/_/things/live/messages"
                ],
                "authorizationContext": ["nginx:ditto"],
                "qos": 0
            }]
        }
    }
}


### DELETE MQTT Connection
POST http://devops:foobar@{{hostname}}:8080/devops/piggyback/connectivity?timeout=10 
Content-Type: application/json

{
  "targetActorSelection": "/system/sharding/connection",
  "headers": {
    "aggregate": false
  },
  "piggybackCommand": {
    "type": "connectivity.commands:deleteConnection",
    "connectionId": "mqtt-example-connection"
  }
}


### DELETE esp32 Thing
DELETE {{proto}}://{{user}}:{{pwd}}@{{hostname}}:{{port}}/api/2/things/test:esp32
Content-Type: application/json




############## default connection


